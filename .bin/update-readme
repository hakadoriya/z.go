#!/usr/bin/env bash

REPO_ROOT=$(git rev-parse --show-toplevel)
target_file="${REPO_ROOT:?}/README.md"

python_bin=$(
  if command -v python3 >/dev/null; then
    command -v python3
  elif command -v python >/dev/null; then
    command -v python
  fi
)

content=$(
  echo "| Package | Summary |"
  echo "|:--------|:--------|"
  find . -name doc.go |
    sort |
    while read -r LINE; do
      # while loop per doc.go
      echo "| [\`$(dirname "${LINE:?}" | sed "s@./@@")\`]($(dirname "${LINE:?}")) | $(grep "^//" "${LINE:?}" | head -n 1 | perl -pe "s|// ||") |"
  done
  echo
)

{
  cat <<'EOS'
#!/usr/bin/env python
import argparse,re,sys
# opts
p = argparse.ArgumentParser()
p.add_argument("-r", "--replace", action="store_true", help="If this option is enabled, the contents of the file will be rewritten.")
p.add_argument("-b", "--before",  dest="before", help="Regular expression before replacement.")
p.add_argument("-a", "--after",   dest="after", help="The string after the replacement.")
p.add_argument("-f", "--file",    dest="file", help="Target file path.")
if len(sys.argv) <= 1:
    p.print_help()
    exit(1)
args = p.parse_args()
# replace
with open(args.file, 'r') as fr:
    before=fr.read()
    after=re.sub(r"%s" % args.before, args.after, before, flags=re.DOTALL)
    if args.replace:
        with open(args.file, 'w') as fw:
            fw.write(after)
    else:
        sys.stdout.write(after)
EOS
} |
# 目次生成
  "${python_bin:?"python をインストールしてください"}" - \
    --file ${target_file:?} \
    --before '(<!-- CODE GENERATED BY UPDATE-README. DO NOT EDIT. GO PACKAGE CONTENT START -->\n).*(<!-- CODE GENERATED BY UPDATE-README. DO NOT EDIT. GO PACKAGE CONTENT END -->\n)' \
    --after "\1\n${content:?}\n\n\2" \
    --replace
